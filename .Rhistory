, shiny::selectInput(inputId = paste0("past_obs_", i)
,label = 'Observation'
,choices = c('Seen', 'Not_seen')
, selected = 'Seen')
, shiny::actionButton(inputId = paste0("submit_couple_", i)
, label = 'Submit')
)
})
)
)
})
})
p_a <- shiny::reactive(smsPOMDP::past_actions(input)) #past actions
p_o <- shiny::reactive(smsPOMDP::past_obs(input)) #past observations
init_belief <- shiny::reactive({
validate( need(input$past_init_b >=0 & input$past_init_b <=1 , "Please select initial belief state (extant) between 0 and 1") )
c(input$past_init_b, 1-input$past_init_b)
}) #initial belief state
current_belief <- shiny::reactive(smsPOMDP::compute_belief(p0(), pm(), d0(), d(), V(), Cm(), Cs(),init_belief(), p_a(), p_o(), disc()))
#
shiny::observeEvent(input$submit_couple_1, {
output$past_plot <- shiny::renderPlot(smsPOMDP::plot_stream(p0(), pm(), d0(), d(), V(), Cm(), Cs(),init_belief(), p_a(), p_o(), disc(), size = 2))
})
shiny::observeEvent(input$next_policy, {
output$next_policy_plot <- shiny::renderPlot({smsPOMDP::graph(p0(), pm(), d0(), d(), V(), Cm(), Cs(), current_belief(), disc())})
})
}
)
shiny::shinyApp(ui, server)
}
run_application()
?seq_len
seq_len(c(1,10))
seq_len(10)
seq_len(length(c(1,2,2,3)))
?compute_belief
#values for Sumatran tigers
pen = 0.1
p0 = 1-pen
pem = 0.05816
pm = 1 - pem
V = 175.133
Cm = 18.784
Cs = 10.840
d0 = 0.01
d = 0.78193
#Initial belief state
state_prior = c(0.9,0.1) #extant : 0.9, extinct : 0.1
#previous actions and observations
ac = c('Manage','Survey','Stop')
ob = c('Not_seen','Not_seen', 'Seen')
seq_len(length.out = )
seq_len(length.out = length(ac))
library(smsPOMDP)
library(smsPOMDP)
?tab_actions
pen = 0.1
p0 = 1-pen
pem = 0.05816
pm = 1 - pem
V = 175.133
Cm = 18.784
Cs = 10.840
d0 = 0.01
d = 0.78193
t = smsPOMDP::tr(p0, pm, d0, d, V, Cm, Cs) #transition matrix
o = smsPOMDP::obs(p0, pm, d0, d, V, Cm, Cs)#observation matrix
r = smsPOMDP::rew(p0, pm, d0, d, V, Cm, Cs)#reward matrix
state_prior = c(1,0)
tab = tab_actions(t, o, r, state_prior)
class(tab)
?minigrpah
?minigraph
if class(tab) != 'data.frame'
print('null')
class(tab) != 'data.frame'
class(tab) == 'data.frame'
dim(tab)
seq_len(10)
seq_len(1)
seq(0,10)
install.packages(c("digest", "rlang", "roxygen2"))
?obs
dim(
obs(p0, pm, d0, d, V, Cm, Cs))
library(smsPOMDP)
dim(
obs(p0, pm, d0, d, V, Cm, Cs))
print("The observation matrix R must be an array (S,O,A) with
S: number of states greater than 0
O: number of states greater than 0
and A : number of actions greater than 0")
?tr
?obs
?rew
?shiny::validate
library(devtools)
remove.packages("smsPOMDP", lib="~/R/win-library/3.6")
build()
build()
install()
build()
build()
install()
install.packages("digest")
install()
devtools
library(devtools)
install()
install.packages("rlang")
library(devtools)
install()
document()
build9
build()
install()
test_file("~/smsPOMDP/tests/testthat/test-compute_belief.R")
test_file("~/smsPOMDP/tests/testthat/test-Interp_policy.R")
test_file("~/smsPOMDP/tests/testthat/test-graph.R")
t
transition = t
observation = o
reward = r
#Checking transition matrix
s1 <- dim(transition)[1]#number of states (rows)
s2 <- dim(transition)[2]#number of stater (cols)
a1 <- dim(transition)[3]#number of actions
s1
s2
a1
if (s1 < 1 | a1 < 1 | s1 != s2) {
print("The transition matrix must be on the form P(S,S,A) with S : number of states greater than 0 and A : number of action greater than 0")
is_error_detected <- TRUE
}
if (!is_error_detected) {
a <- 1
while (a <= a1) {
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The transition matrix must be square stochastic')
is_error_detected <- TRUE
}
}
}
is_error_detected <- FALSE
#Checking transition matrix
s1 <- dim(transition)[1]#number of states (rows)
s2 <- dim(transition)[2]#number of stater (cols)
a1 <- dim(transition)[3]#number of actions
if (s1 < 1 | a1 < 1 | s1 != s2) {
print("The transition matrix must be on the form P(S,S,A) with S : number of states greater than 0 and A : number of action greater than 0")
is_error_detected <- TRUE
}
if (!is_error_detected) {
a <- 1
while (a <= a1) {
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The transition matrix must be square stochastic')
is_error_detected <- TRUE
}
}
}
#Checking reward matrix
if (!is_error_detected) {
s3 <- dim(reward)[1]#number of states of the reward matrix
a2 <- dim(reward)[2]#number of actions of the reward matrix
if (s3 < 1 | a2 < 1) {
print("The reward matrix R must be an array (SxA) with S : number of states greater than 0 and A : number of actions greater than 0")
is_error_detected <- TRUE
}
}
is_error_detected
a <- 1
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
pass
a <- a + 1
a
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The transition matrix must be square stochastic')
is_error_detected <- TRUE
}
a
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The transition matrix must be square stochastic')
is_error_detected <- TRUE
}
a
pass
is_error_detected
s3 <- dim(reward)[1]#number of states of the reward matrix
a2 <- dim(reward)[2]#number of actions of the reward matrix
if (s3 < 1 | a2 < 1) {
print("The reward matrix R must be an array (SxA) with S : number of states greater than 0 and A : number of actions greater than 0")
is_error_detected <- TRUE
}
is_error_detected
if (!is_error_detected) {
if (s1 != s3 | a1 != a2) {
print("Incompatibility between transition and reward dimensions")
is_error_detected <- TRUE
}
}
(s1 != s3 | a1 != a2)
is_error_detected
s4 <- dim(observation)[1]#number of states of the observation matrix
o1 <- dim(observation)[2]#number of observations of the observation matrix
a3 <- dim(observation)[3]#number of actions of the observation matrix
(s4 < 1 | a3 < 1)
if (!is_error_detected) {
a <- 1
while (a <= a1) {
pass <- smsPOMDP::check_stochastic(observation[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The observation array must be stochastic')
is_error_detected <- TRUE
}
}
}
if (!is_error_detected) {
if (s1 != s4 | a1 != a3) {
print("Incompatibility between transition and observation dimensions")
is_error_detected <- TRUE
}
}
m = matrix(c(1,0,0,1), ncol = 2)
m
testthat::expect_condition(smsPOMDP::check_stochastic(m))
check_stochastic(m)
smsPOMDP::check_stochastic(m)
testthat::expect_true(smsPOMDP::check_stochastic(m))
testthat::expect_failure(smsPOMDP::check_stochastic(m2))
m2 = matrix(c(1,1,1,1), ncol = 2)
testthat::expect_failure(smsPOMDP::check_stochastic(m2))
testthat::expect_false(smsPOMDP::check_stochastic(m2))
smsPOMDP::check_stochastic(m2)
a <- runif(2)
a
m <- matrix(c(1,0,0,1), ncol = 2)
testthat::expect_true(smsPOMDP::check_stochastic(m))
set.seed(1)
a <- runif(2)
m1 <- matrix(c(a[1], 1-a[1], a[2], 1-a[2]), ncol = 2, byrow = T)
testthat::expect_true(smsPOMDP::check_stochastic(m1))
m2 <- matrix(c(1,1,1,1), ncol = 2)
testthat::expect_false(smsPOMDP::check_stochastic(m2))
testthat::expect_true(smsPOMDP::check_square_stochastic(m))
m <- matrix(c(1,0,0,1), ncol = 2)
testthat::expect_true(smsPOMDP::check_square_stochastic(m))
set.seed(1)
a <- runif(2)
m1 <- matrix(c(a[1], 1-a[1], a[2], 1-a[2]), ncol = 2, byrow = T)
testthat::expect_true(smsPOMDP::check_square_stochastic(m1))
m2 <- matrix(c(1,1,1,1), ncol = 2)
testthat::expect_false(smsPOMDP::check_square_stochastic(m2))
#stochastic but not square
m3 <- matrix(c(1,0,0,
0,0,1), byrow = T, nrow = 2)
testthat::expect_false(smsPOMDP::check_square_stochastic(m3))
#not square and not stochastic
m4 <- matrix(c(1,2,3,
5,4,1), byrow = T, nrow = 2)
testthat::expect_false(smsPOMDP::check_square_stochastic(m4))
library(smsPOMDP)
?check_pomdp
pen <- 0.1
p0 <- 1-pen
pem <- 0.05816
pm <- 1 - pem
V <- 175.133
Cm <- 18.784
Cs <- 10.840
d0 <- 0.01
d <- 0.78193
t <- smsPOMDP::tr(p0, pm, d0, d, V, Cm, Cs) #transition matrix
o <- smsPOMDP::obs(p0, pm, d0, d, V, Cm, Cs)#observation matrix
r <- smsPOMDP::rew(p0, pm, d0, d, V, Cm, Cs)#reward matrix
testthat::expect_true(smsPOMDP::check_pomdp(t, o, r))
t
smsPOMDP::check_pomdp(t, o, r)
#values for Sumatran tigers
pen <- 0.1
p0 <- 1-pen
pem <- 0.05816
pm <- 1 - pem
V <- 175.133
Cm <- 18.784
Cs <- 10.840
d0 <- 0.01
d <- 0.78193
t <- smsPOMDP::tr(p0, pm, d0, d, V, Cm, Cs) #transition matrix
o <- smsPOMDP::obs(p0, pm, d0, d, V, Cm, Cs)#observation matrix
r <- smsPOMDP::rew(p0, pm, d0, d, V, Cm, Cs)#reward matrix
testthat::expect_true(smsPOMDP::check_pomdp(t, o, r))
#' @export
check_pomdp1 <- function(transition, observation, reward){
test_passed <- TRUE
#Checking transition matrix
s1 <- dim(transition)[1]#number of states (rows)
s2 <- dim(transition)[2]#number of stater (cols)
a1 <- dim(transition)[3]#number of actions
if (s1 < 1 | a1 < 1 | s1 != s2) {
print("The transition matrix must be on the form P(S,S,A) with S : number of states greater than 0 and A : number of action greater than 0")
test_passed <- FALSE
}
if (test_passed) {
a <- 1
while (a <= a1) {
pass <- smsPOMDP::check_square_stochastic(transition[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The transition matrix must be square stochastic')
test_passed <- FALSE
}
}
}
#Checking reward matrix
if (test_passed) {
s3 <- dim(reward)[1]#number of states of the reward matrix
a2 <- dim(reward)[2]#number of actions of the reward matrix
if (s3 < 1 | a2 < 1) {
print("The reward matrix R must be an array (SxA) with S : number of states greater than 0 and A : number of actions greater than 0")
test_passed <- FALSE
}
}
if (test_passed) {
if (s1 != s3 | a1 != a2) {
print("Incompatibility between transition and reward dimensions")
test_passed <- FALSE
}
}
#checking observation matrix
if (test_passed) {
s4 <- dim(observation)[1]#number of states of the observation matrix
o1 <- dim(observation)[2]#number of observations of the observation matrix
a3 <- dim(observation)[3]#number of actions of the observation matrix
if (s4 < 1 | a3 < 1) {
print("The observation matrix R must be an array (S,O,A) with
S: number of states greater than 0
O: number of states greater than 0
and A : number of actions greater than 0")
test_passed <- FALSE
}
}
if (test_passed) {
a <- 1
while (a <= a1) {
pass <- smsPOMDP::check_stochastic(observation[,,a])
#pass=TRUE if transition[,,a] is square stochastic
if (pass) {
a <- a + 1
} else {
a <- a1 + 1
print('The observation array must be stochastic')
test_passed <- FALSE
}
}
}
if (test_passed) {
if (s1 != s4 | a1 != a3) {
print("Incompatibility between transition and observation dimensions")
test_passed <- FALSE
}
}
return(test_passed)
}
#values for Sumatran tigers
pen <- 0.1
p0 <- 1-pen
pem <- 0.05816
pm <- 1 - pem
V <- 175.133
Cm <- 18.784
Cs <- 10.840
d0 <- 0.01
d <- 0.78193
t <- smsPOMDP::tr(p0, pm, d0, d, V, Cm, Cs) #transition matrix
o <- smsPOMDP::obs(p0, pm, d0, d, V, Cm, Cs)#observation matrix
r <- smsPOMDP::rew(p0, pm, d0, d, V, Cm, Cs)#reward matrix
check_pomdp1(t, o, r)
testthat::expect_true(smsPOMDP::check_pomdp(t1, o, r))
#EXPECT TO FAIL THE TEST
t1 <- array(0, dim = c(2,2,3))
testthat::expect_false(smsPOMDP::check_pomdp(t1, o, r))
t1
testthat::expect_false(smsPOMDP::check_pomdp(t1, o, r))
testthat::expect_false(check_pomdp1(t1, o, r))
testthat::expect_false(smsPOMDP::check_pomdp(t, o1, r))
#not stochastic observation
o1 <- array(0, dim = c(2,2,3))
testthat::expect_false(smsPOMDP::check_pomdp(t, o1, r))
testthat::expect_false(smsPOMDP::check_pomdp(t, o, r1))
#not compatible number of actions: transition and reward
r1 <- array(0, dim = c(2,2))
testthat::expect_false(smsPOMDP::check_pomdp(t, o, r1))
#not compatible number of actions: transition and observation
o2 <- array(c(o[,,1], o[,,2]), dim = c(2,2,2))
testthat::expect_false(smsPOMDP::check_pomdp(t, o2, r))
o
remove.packages("smsPOMDP", lib="~/R/win-library/3.6")
library(devtools)
document()
goodpractice::gp()
?need
build()
install()
test_file("~/smsPOMDP/tests/testthat/test-compute_belief.R")
test_file("~/smsPOMDP/tests/testthat/test-Interp_policy.R")
test_file("~/smsPOMDP/tests/testthat/test-graph.R")
test_file("~/smsPOMDP/tests/testthat/test-minigraph.R")
test_file("~/smsPOMDP/tests/testthat/test-obs.R")
test_file("~/smsPOMDP/tests/testthat/test-plot_stream.R")
test_file("~/smsPOMDP/tests/testthat/test-rew.R")
test_file("~/smsPOMDP/tests/testthat/test-tab_actions.R")
test_file("~/smsPOMDP/tests/testthat/test-tr.R")
test_file("~/smsPOMDP/tests/testthat/test-update_belief.R")
test_file('~/smsPOMDP/tests/testthat/test-run_application.R')
# Code used to check run_application
# the folder smsPOMDP/tests/testthat/app/ contains a file calling run_application
library(shinytest)
library(shiny)
# Code used to check run_application
# the folder smsPOMDP/tests/testthat/app/ contains a file calling run_application
library(shinytest)
library(shiny)
recordTest("~/smsPOMDP/tests/testthat/app/")
remove.packages("smsPOMDP", lib="~/R/win-library/3.6")
build()
library(devtools)
document()
build()
install()
# Code used to check run_application
# the folder smsPOMDP/tests/testthat/app/ contains a file calling run_application
library(shinytest)
library(shiny)
recordTest("~/smsPOMDP/tests/testthat/app/")
goodpractice::gp()
goodpractice::gp()
build()
install()
library(testthat)
library(smsPOMDP)
test_package('smsPOMDP')
? usethis::use_testthat()
usethis::use_testthat()
remove.packages("smsPOMDP", lib="~/R/win-library/3.6")
library(testthat)
library(shinytest)
library(shiny)
recordTest('~/smsPOMDP/tests/testthat/app/')
library(devtools)
build()
intstall()
install()
recordTest('~/smsPOMDP/tests/testthat/app/')
?testApp
recordTest('~/smsPOMDP/tests/testthat/app/')
test_file('tests/testthat/test-run_application.R')
testApp("app", compareImages = FALSE)
system.file('app', package = 'smsPOMDP')
# Use compareImages=FALSE because the expected image screenshots were created
# on a Mac, and they will differ from screenshots taken on the CI platform,
# which runs on Linux.
app_path <- system.file('testthat/app', package = 'smsPOMDP')
app_path
# Use compareImages=FALSE because the expected image screenshots were created
# on a Mac, and they will differ from screenshots taken on the CI platform,
# which runs on Linux.
app_path <- system.file('test/testthat/app', package = 'smsPOMDP')
app_path
build()
install()
# Use compareImages=FALSE because the expected image screenshots were created
# on a Mac, and they will differ from screenshots taken on the CI platform,
# which runs on Linux.
app_path <- system.file('test/testthat/app', package = 'smsPOMDP')
app_path
# Use compareImages=FALSE because the expected image screenshots were created
# on a Mac, and they will differ from screenshots taken on the CI platform,
# which runs on Linux.
app_path <- system.file('test/testthat/app/', package = 'smsPOMDP')
# Use compareImages=FALSE because the expected image screenshots were created
# on a Mac, and they will differ from screenshots taken on the CI platform,
# which runs on Linux.
app_path <- system.file('test/testthat/app/app.R', package = 'smsPOMDP')
testApp(run_application())
